//
// File generated by /home/jixie/Software/root_v5.28/bin/rootcint at Tue Mar  8 11:41:40 2016

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME S4KalTrackDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "S4KalTrackDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void TKalTrackSite_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TKalTrackSite(void *p = 0);
   static void *newArray_TKalTrackSite(Long_t size, void *p);
   static void delete_TKalTrackSite(void *p);
   static void deleteArray_TKalTrackSite(void *p);
   static void destruct_TKalTrackSite(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TKalTrackSite*)
   {
      ::TKalTrackSite *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TKalTrackSite >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TKalTrackSite", ::TKalTrackSite::Class_Version(), "./TKalTrackSite.h", 35,
                  typeid(::TKalTrackSite), DefineBehavior(ptr, ptr),
                  &::TKalTrackSite::Dictionary, isa_proxy, 4,
                  sizeof(::TKalTrackSite) );
      instance.SetNew(&new_TKalTrackSite);
      instance.SetNewArray(&newArray_TKalTrackSite);
      instance.SetDelete(&delete_TKalTrackSite);
      instance.SetDeleteArray(&deleteArray_TKalTrackSite);
      instance.SetDestructor(&destruct_TKalTrackSite);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TKalTrackSite*)
   {
      return GenerateInitInstanceLocal((::TKalTrackSite*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TKalTrackSite*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TVKalDetector_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TVKalDetector(void *p = 0);
   static void *newArray_TVKalDetector(Long_t size, void *p);
   static void delete_TVKalDetector(void *p);
   static void deleteArray_TVKalDetector(void *p);
   static void destruct_TVKalDetector(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TVKalDetector*)
   {
      ::TVKalDetector *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TVKalDetector >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TVKalDetector", ::TVKalDetector::Class_Version(), "./TVKalDetector.h", 30,
                  typeid(::TVKalDetector), DefineBehavior(ptr, ptr),
                  &::TVKalDetector::Dictionary, isa_proxy, 4,
                  sizeof(::TVKalDetector) );
      instance.SetNew(&new_TVKalDetector);
      instance.SetNewArray(&newArray_TVKalDetector);
      instance.SetDelete(&delete_TVKalDetector);
      instance.SetDeleteArray(&deleteArray_TVKalDetector);
      instance.SetDestructor(&destruct_TVKalDetector);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TVKalDetector*)
   {
      return GenerateInitInstanceLocal((::TVKalDetector*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TVKalDetector*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TKalDetCradle_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TKalDetCradle(void *p = 0);
   static void *newArray_TKalDetCradle(Long_t size, void *p);
   static void delete_TKalDetCradle(void *p);
   static void deleteArray_TKalDetCradle(void *p);
   static void destruct_TKalDetCradle(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TKalDetCradle*)
   {
      ::TKalDetCradle *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TKalDetCradle >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TKalDetCradle", ::TKalDetCradle::Class_Version(), "./TKalDetCradle.h", 42,
                  typeid(::TKalDetCradle), DefineBehavior(ptr, ptr),
                  &::TKalDetCradle::Dictionary, isa_proxy, 4,
                  sizeof(::TKalDetCradle) );
      instance.SetNew(&new_TKalDetCradle);
      instance.SetNewArray(&newArray_TKalDetCradle);
      instance.SetDelete(&delete_TKalDetCradle);
      instance.SetDeleteArray(&deleteArray_TKalDetCradle);
      instance.SetDestructor(&destruct_TKalDetCradle);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TKalDetCradle*)
   {
      return GenerateInitInstanceLocal((::TKalDetCradle*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TKalDetCradle*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TKalFilterCond_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TKalFilterCond(void *p = 0);
   static void *newArray_TKalFilterCond(Long_t size, void *p);
   static void delete_TKalFilterCond(void *p);
   static void deleteArray_TKalFilterCond(void *p);
   static void destruct_TKalFilterCond(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TKalFilterCond*)
   {
      ::TKalFilterCond *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TKalFilterCond >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TKalFilterCond", ::TKalFilterCond::Class_Version(), "./TKalFilterCond.h", 25,
                  typeid(::TKalFilterCond), DefineBehavior(ptr, ptr),
                  &::TKalFilterCond::Dictionary, isa_proxy, 4,
                  sizeof(::TKalFilterCond) );
      instance.SetNew(&new_TKalFilterCond);
      instance.SetNewArray(&newArray_TKalFilterCond);
      instance.SetDelete(&delete_TKalFilterCond);
      instance.SetDeleteArray(&deleteArray_TKalFilterCond);
      instance.SetDestructor(&destruct_TKalFilterCond);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TKalFilterCond*)
   {
      return GenerateInitInstanceLocal((::TKalFilterCond*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TKalFilterCond*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TKalTrackState_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TKalTrackState(void *p = 0);
   static void *newArray_TKalTrackState(Long_t size, void *p);
   static void delete_TKalTrackState(void *p);
   static void deleteArray_TKalTrackState(void *p);
   static void destruct_TKalTrackState(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TKalTrackState*)
   {
      ::TKalTrackState *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TKalTrackState >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TKalTrackState", ::TKalTrackState::Class_Version(), "./TKalTrackState.h", 37,
                  typeid(::TKalTrackState), DefineBehavior(ptr, ptr),
                  &::TKalTrackState::Dictionary, isa_proxy, 4,
                  sizeof(::TKalTrackState) );
      instance.SetNew(&new_TKalTrackState);
      instance.SetNewArray(&newArray_TKalTrackState);
      instance.SetDelete(&delete_TKalTrackState);
      instance.SetDeleteArray(&deleteArray_TKalTrackState);
      instance.SetDestructor(&destruct_TKalTrackState);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TKalTrackState*)
   {
      return GenerateInitInstanceLocal((::TKalTrackState*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TKalTrackState*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TKalTrack_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TKalTrack(void *p = 0);
   static void *newArray_TKalTrack(Long_t size, void *p);
   static void delete_TKalTrack(void *p);
   static void deleteArray_TKalTrack(void *p);
   static void destruct_TKalTrack(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TKalTrack*)
   {
      ::TKalTrack *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TKalTrack >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TKalTrack", ::TKalTrack::Class_Version(), "./TKalTrack.h", 32,
                  typeid(::TKalTrack), DefineBehavior(ptr, ptr),
                  &::TKalTrack::Dictionary, isa_proxy, 4,
                  sizeof(::TKalTrack) );
      instance.SetNew(&new_TKalTrack);
      instance.SetNewArray(&newArray_TKalTrack);
      instance.SetDelete(&delete_TKalTrack);
      instance.SetDeleteArray(&deleteArray_TKalTrack);
      instance.SetDestructor(&destruct_TKalTrack);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TKalTrack*)
   {
      return GenerateInitInstanceLocal((::TKalTrack*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TKalTrack*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TVTrackHit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_TVTrackHit(void *p);
   static void deleteArray_TVTrackHit(void *p);
   static void destruct_TVTrackHit(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TVTrackHit*)
   {
      ::TVTrackHit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TVTrackHit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TVTrackHit", ::TVTrackHit::Class_Version(), "./TVTrackHit.h", 25,
                  typeid(::TVTrackHit), DefineBehavior(ptr, ptr),
                  &::TVTrackHit::Dictionary, isa_proxy, 4,
                  sizeof(::TVTrackHit) );
      instance.SetDelete(&delete_TVTrackHit);
      instance.SetDeleteArray(&deleteArray_TVTrackHit);
      instance.SetDestructor(&destruct_TVTrackHit);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TVTrackHit*)
   {
      return GenerateInitInstanceLocal((::TVTrackHit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TVTrackHit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TVMeasLayer_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_TVMeasLayer(void *p);
   static void deleteArray_TVMeasLayer(void *p);
   static void destruct_TVMeasLayer(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TVMeasLayer*)
   {
      ::TVMeasLayer *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TVMeasLayer >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TVMeasLayer", ::TVMeasLayer::Class_Version(), "./TVMeasLayer.h", 38,
                  typeid(::TVMeasLayer), DefineBehavior(ptr, ptr),
                  &::TVMeasLayer::Dictionary, isa_proxy, 4,
                  sizeof(::TVMeasLayer) );
      instance.SetDelete(&delete_TVMeasLayer);
      instance.SetDeleteArray(&deleteArray_TVMeasLayer);
      instance.SetDestructor(&destruct_TVMeasLayer);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TVMeasLayer*)
   {
      return GenerateInitInstanceLocal((::TVMeasLayer*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TVMeasLayer*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *TKalTrackSite::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TKalTrackSite::Class_Name()
{
   return "TKalTrackSite";
}

//______________________________________________________________________________
const char *TKalTrackSite::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TKalTrackSite*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TKalTrackSite::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TKalTrackSite*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TKalTrackSite::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TKalTrackSite*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TKalTrackSite::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TKalTrackSite*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TVKalDetector::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TVKalDetector::Class_Name()
{
   return "TVKalDetector";
}

//______________________________________________________________________________
const char *TVKalDetector::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TVKalDetector*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TVKalDetector::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TVKalDetector*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TVKalDetector::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TVKalDetector*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TVKalDetector::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TVKalDetector*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TKalDetCradle::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TKalDetCradle::Class_Name()
{
   return "TKalDetCradle";
}

//______________________________________________________________________________
const char *TKalDetCradle::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TKalDetCradle*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TKalDetCradle::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TKalDetCradle*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TKalDetCradle::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TKalDetCradle*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TKalDetCradle::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TKalDetCradle*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TKalFilterCond::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TKalFilterCond::Class_Name()
{
   return "TKalFilterCond";
}

//______________________________________________________________________________
const char *TKalFilterCond::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TKalFilterCond*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TKalFilterCond::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TKalFilterCond*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TKalFilterCond::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TKalFilterCond*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TKalFilterCond::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TKalFilterCond*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TKalTrackState::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TKalTrackState::Class_Name()
{
   return "TKalTrackState";
}

//______________________________________________________________________________
const char *TKalTrackState::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TKalTrackState*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TKalTrackState::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TKalTrackState*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TKalTrackState::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TKalTrackState*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TKalTrackState::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TKalTrackState*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TKalTrack::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TKalTrack::Class_Name()
{
   return "TKalTrack";
}

//______________________________________________________________________________
const char *TKalTrack::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TKalTrack*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TKalTrack::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TKalTrack*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TKalTrack::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TKalTrack*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TKalTrack::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TKalTrack*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TVTrackHit::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TVTrackHit::Class_Name()
{
   return "TVTrackHit";
}

//______________________________________________________________________________
const char *TVTrackHit::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TVTrackHit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TVTrackHit::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TVTrackHit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TVTrackHit::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TVTrackHit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TVTrackHit::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TVTrackHit*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TVMeasLayer::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TVMeasLayer::Class_Name()
{
   return "TVMeasLayer";
}

//______________________________________________________________________________
const char *TVMeasLayer::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TVMeasLayer*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TVMeasLayer::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TVMeasLayer*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TVMeasLayer::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TVMeasLayer*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TVMeasLayer::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TVMeasLayer*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void TVTrackHit::Streamer(TBuffer &R__b)
{
   // Stream an object of class TVTrackHit.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TVTrackHit::Class(),this);
   } else {
      R__b.WriteClassBuffer(TVTrackHit::Class(),this);
   }
}

//______________________________________________________________________________
void TVTrackHit::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TVTrackHit.
      TClass *R__cl = ::TVTrackHit::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDim", &fDim);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBfield", &fBfield);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMeasLayerPtr", &fMeasLayerPtr);
      TKalMatrix::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_TVTrackHit(void *p) {
      delete ((::TVTrackHit*)p);
   }
   static void deleteArray_TVTrackHit(void *p) {
      delete [] ((::TVTrackHit*)p);
   }
   static void destruct_TVTrackHit(void *p) {
      typedef ::TVTrackHit current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TVTrackHit

//______________________________________________________________________________
void TVMeasLayer::Streamer(TBuffer &R__b)
{
   // Stream an object of class TVMeasLayer.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TVMeasLayer::Class(),this);
   } else {
      R__b.WriteClassBuffer(TVMeasLayer::Class(),this);
   }
}

//______________________________________________________________________________
void TVMeasLayer::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TVMeasLayer.
      TClass *R__cl = ::TVMeasLayer::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMaterialInPtr", &fMaterialInPtr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMaterialOutPtr", &fMaterialOutPtr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIndex", &fIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsActive", &fIsActive);
      TAttElement::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_TVMeasLayer(void *p) {
      delete ((::TVMeasLayer*)p);
   }
   static void deleteArray_TVMeasLayer(void *p) {
      delete [] ((::TVMeasLayer*)p);
   }
   static void destruct_TVMeasLayer(void *p) {
      typedef ::TVMeasLayer current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TVMeasLayer

//______________________________________________________________________________
void TKalTrackSite::Streamer(TBuffer &R__b)
{
   // Stream an object of class TKalTrackSite.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TKalTrackSite::Class(),this);
   } else {
      R__b.WriteClassBuffer(TKalTrackSite::Class(),this);
   }
}

//______________________________________________________________________________
void TKalTrackSite::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TKalTrackSite.
      TClass *R__cl = ::TKalTrackSite::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHitPtr", &fHitPtr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fX0", &fX0);
      R__insp.InspectMember(fX0, "fX0.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsHitOwner", &fIsHitOwner);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCondPtr", &fCondPtr);
      TVKalSite::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TKalTrackSite(void *p) {
      return  p ? new(p) ::TKalTrackSite : new ::TKalTrackSite;
   }
   static void *newArray_TKalTrackSite(Long_t nElements, void *p) {
      return p ? new(p) ::TKalTrackSite[nElements] : new ::TKalTrackSite[nElements];
   }
   // Wrapper around operator delete
   static void delete_TKalTrackSite(void *p) {
      delete ((::TKalTrackSite*)p);
   }
   static void deleteArray_TKalTrackSite(void *p) {
      delete [] ((::TKalTrackSite*)p);
   }
   static void destruct_TKalTrackSite(void *p) {
      typedef ::TKalTrackSite current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TKalTrackSite

//______________________________________________________________________________
void TKalTrackState::Streamer(TBuffer &R__b)
{
   // Stream an object of class TKalTrackState.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TKalTrackState::Class(),this);
   } else {
      R__b.WriteClassBuffer(TKalTrackState::Class(),this);
   }
}

//______________________________________________________________________________
void TKalTrackState::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TKalTrackState.
      TClass *R__cl = ::TKalTrackState::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fX0", &fX0);
      R__insp.InspectMember(fX0, "fX0.");
      TVKalState::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TKalTrackState(void *p) {
      return  p ? new(p) ::TKalTrackState : new ::TKalTrackState;
   }
   static void *newArray_TKalTrackState(Long_t nElements, void *p) {
      return p ? new(p) ::TKalTrackState[nElements] : new ::TKalTrackState[nElements];
   }
   // Wrapper around operator delete
   static void delete_TKalTrackState(void *p) {
      delete ((::TKalTrackState*)p);
   }
   static void deleteArray_TKalTrackState(void *p) {
      delete [] ((::TKalTrackState*)p);
   }
   static void destruct_TKalTrackState(void *p) {
      typedef ::TKalTrackState current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TKalTrackState

//______________________________________________________________________________
void TKalTrack::Streamer(TBuffer &R__b)
{
   // Stream an object of class TKalTrack.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TKalTrack::Class(),this);
   } else {
      R__b.WriteClassBuffer(TKalTrack::Class(),this);
   }
}

//______________________________________________________________________________
void TKalTrack::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TKalTrack.
      TClass *R__cl = ::TKalTrack::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMass", &fMass);
      TVKalSystem::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TKalTrack(void *p) {
      return  p ? new(p) ::TKalTrack : new ::TKalTrack;
   }
   static void *newArray_TKalTrack(Long_t nElements, void *p) {
      return p ? new(p) ::TKalTrack[nElements] : new ::TKalTrack[nElements];
   }
   // Wrapper around operator delete
   static void delete_TKalTrack(void *p) {
      delete ((::TKalTrack*)p);
   }
   static void deleteArray_TKalTrack(void *p) {
      delete [] ((::TKalTrack*)p);
   }
   static void destruct_TKalTrack(void *p) {
      typedef ::TKalTrack current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TKalTrack

//______________________________________________________________________________
void TKalDetCradle::Streamer(TBuffer &R__b)
{
   // Stream an object of class TKalDetCradle.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TKalDetCradle::Class(),this);
   } else {
      R__b.WriteClassBuffer(TKalDetCradle::Class(),this);
   }
}

//______________________________________________________________________________
void TKalDetCradle::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TKalDetCradle.
      TClass *R__cl = ::TKalDetCradle::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsMSON", &fIsMSON);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsDEDXON", &fIsDEDXON);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDone", &fDone);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsClosed", &fIsClosed);
      TObjArray::ShowMembers(R__insp);
      TAttElement::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TKalDetCradle(void *p) {
      return  p ? new(p) ::TKalDetCradle : new ::TKalDetCradle;
   }
   static void *newArray_TKalDetCradle(Long_t nElements, void *p) {
      return p ? new(p) ::TKalDetCradle[nElements] : new ::TKalDetCradle[nElements];
   }
   // Wrapper around operator delete
   static void delete_TKalDetCradle(void *p) {
      delete ((::TKalDetCradle*)p);
   }
   static void deleteArray_TKalDetCradle(void *p) {
      delete [] ((::TKalDetCradle*)p);
   }
   static void destruct_TKalDetCradle(void *p) {
      typedef ::TKalDetCradle current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TKalDetCradle

//______________________________________________________________________________
void TVKalDetector::Streamer(TBuffer &R__b)
{
   // Stream an object of class TVKalDetector.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TVKalDetector::Class(),this);
   } else {
      R__b.WriteClassBuffer(TVKalDetector::Class(),this);
   }
}

//______________________________________________________________________________
void TVKalDetector::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TVKalDetector.
      TClass *R__cl = ::TVKalDetector::IsA();
      if (R__cl || R__insp.IsA()) { }
      TObjArray::ShowMembers(R__insp);
      TAttElement::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TVKalDetector(void *p) {
      return  p ? new(p) ::TVKalDetector : new ::TVKalDetector;
   }
   static void *newArray_TVKalDetector(Long_t nElements, void *p) {
      return p ? new(p) ::TVKalDetector[nElements] : new ::TVKalDetector[nElements];
   }
   // Wrapper around operator delete
   static void delete_TVKalDetector(void *p) {
      delete ((::TVKalDetector*)p);
   }
   static void deleteArray_TVKalDetector(void *p) {
      delete [] ((::TVKalDetector*)p);
   }
   static void destruct_TVKalDetector(void *p) {
      typedef ::TVKalDetector current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TVKalDetector

//______________________________________________________________________________
void TKalFilterCond::Streamer(TBuffer &R__b)
{
   // Stream an object of class TKalFilterCond.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TKalFilterCond::Class(),this);
   } else {
      R__b.WriteClassBuffer(TKalFilterCond::Class(),this);
   }
}

//______________________________________________________________________________
void TKalFilterCond::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TKalFilterCond.
      TClass *R__cl = ::TKalFilterCond::IsA();
      if (R__cl || R__insp.IsA()) { }
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TKalFilterCond(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TKalFilterCond : new ::TKalFilterCond;
   }
   static void *newArray_TKalFilterCond(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::TKalFilterCond[nElements] : new ::TKalFilterCond[nElements];
   }
   // Wrapper around operator delete
   static void delete_TKalFilterCond(void *p) {
      delete ((::TKalFilterCond*)p);
   }
   static void deleteArray_TKalFilterCond(void *p) {
      delete [] ((::TKalFilterCond*)p);
   }
   static void destruct_TKalFilterCond(void *p) {
      typedef ::TKalFilterCond current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TKalFilterCond

/********************************************************
* S4KalTrackDict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableS4KalTrackDict();

extern "C" void G__set_cpp_environmentS4KalTrackDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("KalTrackDim.h");
  G__add_compiledheader("TKalDetCradle.h");
  G__add_compiledheader("TKalFilterCond.h");
  G__add_compiledheader("TKalTrack.h");
  G__add_compiledheader("TKalTrackSite.h");
  G__add_compiledheader("TKalTrackState.h");
  G__add_compiledheader("TVKalDetector.h");
  G__add_compiledheader("TVMeasLayer.h");
  G__add_compiledheader("TVTrackHit.h");
  G__cpp_reset_tagtableS4KalTrackDict();
}
#include <new>
extern "C" int G__cpp_dllrevS4KalTrackDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* TKalTrackSite */
static int G__S4KalTrackDict_240_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TKalTrackSite* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TKalTrackSite((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) TKalTrackSite((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TKalTrackSite((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) TKalTrackSite((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TKalTrackSite[n];
       } else {
         p = new((void*) gvp) TKalTrackSite[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TKalTrackSite;
       } else {
         p = new((void*) gvp) TKalTrackSite;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalTrackSite));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_240_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TKalTrackSite* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TKalTrackSite(*(TVTrackHit*) libp->para[0].ref, (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) TKalTrackSite(*(TVTrackHit*) libp->para[0].ref, (Int_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TKalTrackSite(*(TVTrackHit*) libp->para[0].ref);
     } else {
       p = new((void*) gvp) TKalTrackSite(*(TVTrackHit*) libp->para[0].ref);
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalTrackSite));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_240_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVTrackHit& obj = ((const TKalTrackSite*) G__getstructoffset())->GetHit();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_240_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector3& obj = ((const TKalTrackSite*) G__getstructoffset())->GetPivot();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_240_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TKalTrackSite*) G__getstructoffset())->GetBfield());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_240_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TKalTrackSite*) G__getstructoffset())->IsInB());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_240_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TKalTrackSite*) G__getstructoffset())->IsHitOwner());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_240_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TKalTrackSite*) G__getstructoffset())->SetPivot(*(TVector3*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_240_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((TKalTrackSite*) G__getstructoffset())->SetHitOwner((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((TKalTrackSite*) G__getstructoffset())->SetHitOwner();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_240_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TKalTrackSite*) G__getstructoffset())->SetFilterCond((TKalFilterCond*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_240_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TKalTrackSite::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_240_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TKalTrackSite::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_240_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TKalTrackSite::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_240_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TKalTrackSite::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_240_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TKalTrackSite*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_240_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TKalTrackSite::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_240_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TKalTrackSite::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_240_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TKalTrackSite::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_240_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TKalTrackSite::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TKalTrackSite G__TTKalTrackSite;
static int G__S4KalTrackDict_240_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TKalTrackSite*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TKalTrackSite*) (soff+(sizeof(TKalTrackSite)*i)))->~G__TTKalTrackSite();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TKalTrackSite*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TKalTrackSite*) (soff))->~G__TTKalTrackSite();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TVKalDetector */
static int G__S4KalTrackDict_241_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TVKalDetector* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TVKalDetector((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) TVKalDetector((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TVKalDetector[n];
       } else {
         p = new((void*) gvp) TVKalDetector[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TVKalDetector;
       } else {
         p = new((void*) gvp) TVKalDetector;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S4KalTrackDictLN_TVKalDetector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_241_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TVKalDetector::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_241_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TVKalDetector::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_241_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TVKalDetector::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_241_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TVKalDetector::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_241_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TVKalDetector*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_241_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TVKalDetector::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_241_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TVKalDetector::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_241_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TVKalDetector::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_241_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TVKalDetector::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TVKalDetector G__TTVKalDetector;
static int G__S4KalTrackDict_241_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TVKalDetector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TVKalDetector*) (soff+(sizeof(TVKalDetector)*i)))->~G__TTVKalDetector();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TVKalDetector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TVKalDetector*) (soff))->~G__TTVKalDetector();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TKalDetCradle */
static int G__S4KalTrackDict_244_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TKalDetCradle* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TKalDetCradle((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) TKalDetCradle((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TKalDetCradle[n];
       } else {
         p = new((void*) gvp) TKalDetCradle[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TKalDetCradle;
       } else {
         p = new((void*) gvp) TKalDetCradle;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalDetCradle));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_244_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TKalDetCradle*) G__getstructoffset())->Install(*(TVKalDetector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_244_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TKalDetCradle*) G__getstructoffset())->SwitchOnMS();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_244_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TKalDetCradle*) G__getstructoffset())->SwitchOffMS();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_244_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TKalDetCradle*) G__getstructoffset())->SwitchOnDEDX();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_244_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TKalDetCradle*) G__getstructoffset())->SwitchOffDEDX();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_244_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TKalDetCradle*) G__getstructoffset())->Close();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_244_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TKalDetCradle*) G__getstructoffset())->Reopen();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_244_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TKalDetCradle*) G__getstructoffset())->IsMSOn());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_244_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TKalDetCradle*) G__getstructoffset())->IsDEDXOn());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_244_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TKalDetCradle*) G__getstructoffset())->IsClosed());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_244_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TKalDetCradle*) G__getstructoffset())->Transport(*(TKalTrackSite*) libp->para[0].ref, *(TKalTrackSite*) libp->para[1].ref
, *(TKalMatrix*) libp->para[2].ref, *(TKalMatrix*) libp->para[3].ref
, *(TKalMatrix*) libp->para[4].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_244_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TKalDetCradle*) G__getstructoffset())->GetEnergyLoss(*(TMaterial*) libp->para[0].ref, *(TVTrack*) libp->para[1].ref
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_244_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const TKalDetCradle*) G__getstructoffset())->CalcQms(*(TMaterial*) libp->para[0].ref, *(TVTrack*) libp->para[1].ref
, (Double_t) G__double(libp->para[2]), *(TKalMatrix*) libp->para[3].ref
, (Double_t) G__double(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_244_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TKalDetCradle::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_244_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TKalDetCradle::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_244_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TKalDetCradle::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_244_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TKalDetCradle::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_244_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TKalDetCradle*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_244_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TKalDetCradle::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_244_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TKalDetCradle::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_244_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TKalDetCradle::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_244_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TKalDetCradle::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TKalDetCradle G__TTKalDetCradle;
static int G__S4KalTrackDict_244_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TKalDetCradle*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TKalDetCradle*) (soff+(sizeof(TKalDetCradle)*i)))->~G__TTKalDetCradle();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TKalDetCradle*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TKalDetCradle*) (soff))->~G__TTKalDetCradle();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TKalFilterCond */
static int G__S4KalTrackDict_245_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((TKalFilterCond*) G__getstructoffset())->IsAccepted(*(TKalTrackSite*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_245_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TKalFilterCond::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_245_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TKalFilterCond::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_245_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TKalFilterCond::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_245_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TKalFilterCond::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_245_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const TKalFilterCond*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_245_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TKalFilterCond*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_245_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TKalFilterCond*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_245_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TKalFilterCond*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_245_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TKalFilterCond::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_245_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TKalFilterCond::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_245_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TKalFilterCond::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_245_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TKalFilterCond::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__S4KalTrackDict_245_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TKalFilterCond *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TKalFilterCond[n];
     } else {
       p = new((void*) gvp) TKalFilterCond[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TKalFilterCond;
     } else {
       p = new((void*) gvp) TKalFilterCond;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalFilterCond));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__S4KalTrackDict_245_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TKalFilterCond* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TKalFilterCond(*(TKalFilterCond*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalFilterCond));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TKalFilterCond G__TTKalFilterCond;
static int G__S4KalTrackDict_245_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TKalFilterCond*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TKalFilterCond*) (soff+(sizeof(TKalFilterCond)*i)))->~G__TTKalFilterCond();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TKalFilterCond*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TKalFilterCond*) (soff))->~G__TTKalFilterCond();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__S4KalTrackDict_245_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TKalFilterCond* dest = (TKalFilterCond*) G__getstructoffset();
   *dest = *(TKalFilterCond*) libp->para[0].ref;
   const TKalFilterCond& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TKalTrackState */
static int G__S4KalTrackDict_254_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TKalTrackState* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TKalTrackState((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) TKalTrackState((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TKalTrackState[n];
       } else {
         p = new((void*) gvp) TKalTrackState[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TKalTrackState;
       } else {
         p = new((void*) gvp) TKalTrackState;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalTrackState));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_254_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TKalTrackState* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TKalTrackState(
*(TKalMatrix*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) TKalTrackState(
*(TKalMatrix*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TKalTrackState(*(TKalMatrix*) libp->para[0].ref, (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) TKalTrackState(*(TKalMatrix*) libp->para[0].ref, (Int_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TKalTrackState(*(TKalMatrix*) libp->para[0].ref);
     } else {
       p = new((void*) gvp) TKalTrackState(*(TKalMatrix*) libp->para[0].ref);
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalTrackState));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_254_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TKalTrackState* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TKalTrackState(
*(TKalMatrix*) libp->para[0].ref, *(TKalMatrix*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) TKalTrackState(
*(TKalMatrix*) libp->para[0].ref, *(TKalMatrix*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TKalTrackState(
*(TKalMatrix*) libp->para[0].ref, *(TKalMatrix*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) TKalTrackState(
*(TKalMatrix*) libp->para[0].ref, *(TKalMatrix*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TKalTrackState(*(TKalMatrix*) libp->para[0].ref, *(TKalMatrix*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) TKalTrackState(*(TKalMatrix*) libp->para[0].ref, *(TKalMatrix*) libp->para[1].ref);
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalTrackState));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_254_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TKalTrackState* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TKalTrackState(
*(TKalMatrix*) libp->para[0].ref, *(TVKalSite*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) TKalTrackState(
*(TKalMatrix*) libp->para[0].ref, *(TVKalSite*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TKalTrackState(
*(TKalMatrix*) libp->para[0].ref, *(TVKalSite*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) TKalTrackState(
*(TKalMatrix*) libp->para[0].ref, *(TVKalSite*) libp->para[1].ref
, (Int_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TKalTrackState(*(TKalMatrix*) libp->para[0].ref, *(TVKalSite*) libp->para[1].ref);
     } else {
       p = new((void*) gvp) TKalTrackState(*(TKalMatrix*) libp->para[0].ref, *(TVKalSite*) libp->para[1].ref);
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalTrackState));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_254_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TKalTrackState* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TKalTrackState(
*(TKalMatrix*) libp->para[0].ref, *(TKalMatrix*) libp->para[1].ref
, *(TVKalSite*) libp->para[2].ref, (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) TKalTrackState(
*(TKalMatrix*) libp->para[0].ref, *(TKalMatrix*) libp->para[1].ref
, *(TVKalSite*) libp->para[2].ref, (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TKalTrackState(
*(TKalMatrix*) libp->para[0].ref, *(TKalMatrix*) libp->para[1].ref
, *(TVKalSite*) libp->para[2].ref, (Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) TKalTrackState(
*(TKalMatrix*) libp->para[0].ref, *(TKalMatrix*) libp->para[1].ref
, *(TVKalSite*) libp->para[2].ref, (Int_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TKalTrackState(
*(TKalMatrix*) libp->para[0].ref, *(TKalMatrix*) libp->para[1].ref
, *(TVKalSite*) libp->para[2].ref);
     } else {
       p = new((void*) gvp) TKalTrackState(
*(TKalMatrix*) libp->para[0].ref, *(TKalMatrix*) libp->para[1].ref
, *(TVKalSite*) libp->para[2].ref);
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalTrackState));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_254_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const THelicalTrack* pobj;
         const THelicalTrack xobj = ((const TKalTrackState*) G__getstructoffset())->GetHelix();
         pobj = new THelicalTrack(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_254_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TStraightTrack* pobj;
         const TStraightTrack xobj = ((const TKalTrackState*) G__getstructoffset())->GetLine();
         pobj = new TStraightTrack(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_254_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVTrack& obj = ((const TKalTrackState*) G__getstructoffset())->CreateTrack();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_254_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TKalTrackState::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_254_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TKalTrackState::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_254_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TKalTrackState::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_254_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TKalTrackState::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_254_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TKalTrackState*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_254_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TKalTrackState::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_254_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TKalTrackState::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_254_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TKalTrackState::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_254_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TKalTrackState::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__S4KalTrackDict_254_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TKalTrackState* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TKalTrackState(*(TKalTrackState*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalTrackState));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TKalTrackState G__TTKalTrackState;
static int G__S4KalTrackDict_254_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TKalTrackState*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TKalTrackState*) (soff+(sizeof(TKalTrackState)*i)))->~G__TTKalTrackState();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TKalTrackState*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TKalTrackState*) (soff))->~G__TTKalTrackState();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__S4KalTrackDict_254_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TKalTrackState* dest = (TKalTrackState*) G__getstructoffset();
   *dest = *(TKalTrackState*) libp->para[0].ref;
   const TKalTrackState& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TKalTrack */
static int G__S4KalTrackDict_255_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TKalTrack* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TKalTrack((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) TKalTrack((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TKalTrack[n];
       } else {
         p = new((void*) gvp) TKalTrack[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new TKalTrack;
       } else {
         p = new((void*) gvp) TKalTrack;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_255_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TKalTrack*) G__getstructoffset())->SetMass((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_255_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TKalTrack*) G__getstructoffset())->GetMass());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_255_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((TKalTrack*) G__getstructoffset())->FitToHelix(*(TKalTrackState*) libp->para[0].ref, *(TKalMatrix*) libp->para[1].ref
, *(Int_t*) G__Intref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_255_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TKalTrack::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_255_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TKalTrack::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_255_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TKalTrack::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_255_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TKalTrack::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_255_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TKalTrack*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_255_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TKalTrack::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_255_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TKalTrack::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_255_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TKalTrack::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_255_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TKalTrack::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TKalTrack G__TTKalTrack;
static int G__S4KalTrackDict_255_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TKalTrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TKalTrack*) (soff+(sizeof(TKalTrack)*i)))->~G__TTKalTrack();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TKalTrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TKalTrack*) (soff))->~G__TTKalTrack();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TVTrackHit */
static int G__S4KalTrackDict_257_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TVTrackHit*) G__getstructoffset())->GetX((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_257_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TVTrackHit*) G__getstructoffset())->GetDX((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_257_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TVTrackHit*) G__getstructoffset())->GetDimension());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_257_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const TVTrackHit*) G__getstructoffset())->GetBfield());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_257_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVMeasLayer& obj = ((const TVTrackHit*) G__getstructoffset())->GetMeasLayer();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_257_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TKalMatrix* pobj;
         const TKalMatrix xobj = ((const TVTrackHit*) G__getstructoffset())->XvToMv(*(TVector3*) libp->para[0].ref, (Double_t) G__double(libp->para[1]));
         pobj = new TKalMatrix(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_257_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((const TVTrackHit*) G__getstructoffset())->DebugPrint((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((const TVTrackHit*) G__getstructoffset())->DebugPrint();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_257_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TVTrackHit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_257_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TVTrackHit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_257_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TVTrackHit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_257_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TVTrackHit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_257_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TVTrackHit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_257_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TVTrackHit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_257_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TVTrackHit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_257_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TVTrackHit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_257_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TVTrackHit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TVTrackHit G__TTVTrackHit;
static int G__S4KalTrackDict_257_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TVTrackHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TVTrackHit*) (soff+(sizeof(TVTrackHit)*i)))->~G__TTVTrackHit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TVTrackHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TVTrackHit*) (soff))->~G__TTVTrackHit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__S4KalTrackDict_257_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TVTrackHit* dest = (TVTrackHit*) G__getstructoffset();
   *dest = *(TVTrackHit*) libp->para[0].ref;
   const TVTrackHit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TVMeasLayer */
static int G__S4KalTrackDict_258_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TKalMatrix* pobj;
         const TKalMatrix xobj = ((const TVMeasLayer*) G__getstructoffset())->XvToMv(*(TVTrackHit*) libp->para[0].ref, *(TVector3*) libp->para[1].ref);
         pobj = new TKalMatrix(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_258_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector3* pobj;
         const TVector3 xobj = ((const TVMeasLayer*) G__getstructoffset())->HitToXv(*(TVTrackHit*) libp->para[0].ref);
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_258_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const TVMeasLayer*) G__getstructoffset())->CalcDhDa(*(TVTrackHit*) libp->para[0].ref, *(TVector3*) libp->para[1].ref
, *(TKalMatrix*) libp->para[2].ref, *(TKalMatrix*) libp->para[3].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_258_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TMaterial& obj = ((const TVMeasLayer*) G__getstructoffset())->GetMaterial((Bool_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_258_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const TVMeasLayer*) G__getstructoffset())->GetIndex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_258_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TVMeasLayer*) G__getstructoffset())->SetIndex((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_258_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const TVMeasLayer*) G__getstructoffset())->IsActive());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_258_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TVMeasLayer::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_258_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TVMeasLayer::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_258_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TVMeasLayer::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_258_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TVMeasLayer::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_258_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TVMeasLayer*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_258_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TVMeasLayer::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_258_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TVMeasLayer::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_258_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TVMeasLayer::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__S4KalTrackDict_258_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TVMeasLayer::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TVMeasLayer G__TTVMeasLayer;
static int G__S4KalTrackDict_258_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TVMeasLayer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TVMeasLayer*) (soff+(sizeof(TVMeasLayer)*i)))->~G__TTVMeasLayer();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TVMeasLayer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TVMeasLayer*) (soff))->~G__TTVMeasLayer();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__S4KalTrackDict_258_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TVMeasLayer* dest = (TVMeasLayer*) G__getstructoffset();
   *dest = *(TVMeasLayer*) libp->para[0].ref;
   const TVMeasLayer& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* TKalTrackSite */

/* TVKalDetector */

/* TKalDetCradle */

/* TKalFilterCond */

/* TKalTrackState */

/* TKalTrack */

/* TVTrackHit */

/* TVMeasLayer */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncS4KalTrackDict {
 public:
  G__Sizep2memfuncS4KalTrackDict(): p(&G__Sizep2memfuncS4KalTrackDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncS4KalTrackDict::*p)();
};

size_t G__get_sizep2memfuncS4KalTrackDict()
{
  G__Sizep2memfuncS4KalTrackDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceS4KalTrackDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalTrackSite))) {
     TKalTrackSite *G__Lderived;
     G__Lderived=(TKalTrackSite*)0x1000;
     {
       TVKalSite *G__Lpbase=(TVKalSite*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalTrackSite),G__get_linked_tagnum(&G__S4KalTrackDictLN_TVKalSite),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObjArray *G__Lpbase=(TObjArray*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalTrackSite),G__get_linked_tagnum(&G__S4KalTrackDictLN_TObjArray),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TSeqCollection *G__Lpbase=(TSeqCollection*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalTrackSite),G__get_linked_tagnum(&G__S4KalTrackDictLN_TSeqCollection),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TCollection *G__Lpbase=(TCollection*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalTrackSite),G__get_linked_tagnum(&G__S4KalTrackDictLN_TCollection),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalTrackSite),G__get_linked_tagnum(&G__S4KalTrackDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLockable *G__Lpbase=(TAttLockable*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalTrackSite),G__get_linked_tagnum(&G__S4KalTrackDictLN_TAttLockable),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__S4KalTrackDictLN_TVKalDetector))) {
     TVKalDetector *G__Lderived;
     G__Lderived=(TVKalDetector*)0x1000;
     {
       TObjArray *G__Lpbase=(TObjArray*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S4KalTrackDictLN_TVKalDetector),G__get_linked_tagnum(&G__S4KalTrackDictLN_TObjArray),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TSeqCollection *G__Lpbase=(TSeqCollection*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S4KalTrackDictLN_TVKalDetector),G__get_linked_tagnum(&G__S4KalTrackDictLN_TSeqCollection),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TCollection *G__Lpbase=(TCollection*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S4KalTrackDictLN_TVKalDetector),G__get_linked_tagnum(&G__S4KalTrackDictLN_TCollection),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S4KalTrackDictLN_TVKalDetector),G__get_linked_tagnum(&G__S4KalTrackDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttElement *G__Lpbase=(TAttElement*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S4KalTrackDictLN_TVKalDetector),G__get_linked_tagnum(&G__S4KalTrackDictLN_TAttElement),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalDetCradle))) {
     TKalDetCradle *G__Lderived;
     G__Lderived=(TKalDetCradle*)0x1000;
     {
       TObjArray *G__Lpbase=(TObjArray*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalDetCradle),G__get_linked_tagnum(&G__S4KalTrackDictLN_TObjArray),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TSeqCollection *G__Lpbase=(TSeqCollection*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalDetCradle),G__get_linked_tagnum(&G__S4KalTrackDictLN_TSeqCollection),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TCollection *G__Lpbase=(TCollection*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalDetCradle),G__get_linked_tagnum(&G__S4KalTrackDictLN_TCollection),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalDetCradle),G__get_linked_tagnum(&G__S4KalTrackDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttElement *G__Lpbase=(TAttElement*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalDetCradle),G__get_linked_tagnum(&G__S4KalTrackDictLN_TAttElement),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__S4KalTrackDictLN_TVKalSite))) {
     TVKalSite *G__Lderived;
     G__Lderived=(TVKalSite*)0x1000;
     {
       TObjArray *G__Lpbase=(TObjArray*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S4KalTrackDictLN_TVKalSite),G__get_linked_tagnum(&G__S4KalTrackDictLN_TObjArray),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TSeqCollection *G__Lpbase=(TSeqCollection*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S4KalTrackDictLN_TVKalSite),G__get_linked_tagnum(&G__S4KalTrackDictLN_TSeqCollection),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TCollection *G__Lpbase=(TCollection*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S4KalTrackDictLN_TVKalSite),G__get_linked_tagnum(&G__S4KalTrackDictLN_TCollection),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S4KalTrackDictLN_TVKalSite),G__get_linked_tagnum(&G__S4KalTrackDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLockable *G__Lpbase=(TAttLockable*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S4KalTrackDictLN_TVKalSite),G__get_linked_tagnum(&G__S4KalTrackDictLN_TAttLockable),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalTrackState))) {
     TKalTrackState *G__Lderived;
     G__Lderived=(TKalTrackState*)0x1000;
     {
       TVKalState *G__Lpbase=(TVKalState*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalTrackState),G__get_linked_tagnum(&G__S4KalTrackDictLN_TVKalState),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TKalMatrix *G__Lpbase=(TKalMatrix*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalTrackState),G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalMatrix),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TMatrixT<double> *G__Lpbase=(TMatrixT<double>*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalTrackState),G__get_linked_tagnum(&G__S4KalTrackDictLN_TMatrixTlEdoublegR),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TMatrixTBase<double> *G__Lpbase=(TMatrixTBase<double>*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalTrackState),G__get_linked_tagnum(&G__S4KalTrackDictLN_TMatrixTBaselEdoublegR),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalTrackState),G__get_linked_tagnum(&G__S4KalTrackDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalTrack))) {
     TKalTrack *G__Lderived;
     G__Lderived=(TKalTrack*)0x1000;
     {
       TVKalSystem *G__Lpbase=(TVKalSystem*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalTrack),G__get_linked_tagnum(&G__S4KalTrackDictLN_TVKalSystem),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObjArray *G__Lpbase=(TObjArray*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalTrack),G__get_linked_tagnum(&G__S4KalTrackDictLN_TObjArray),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TSeqCollection *G__Lpbase=(TSeqCollection*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalTrack),G__get_linked_tagnum(&G__S4KalTrackDictLN_TSeqCollection),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TCollection *G__Lpbase=(TCollection*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalTrack),G__get_linked_tagnum(&G__S4KalTrackDictLN_TCollection),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalTrack),G__get_linked_tagnum(&G__S4KalTrackDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__S4KalTrackDictLN_TVTrackHit))) {
     TVTrackHit *G__Lderived;
     G__Lderived=(TVTrackHit*)0x1000;
     {
       TKalMatrix *G__Lpbase=(TKalMatrix*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S4KalTrackDictLN_TVTrackHit),G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalMatrix),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TMatrixT<double> *G__Lpbase=(TMatrixT<double>*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S4KalTrackDictLN_TVTrackHit),G__get_linked_tagnum(&G__S4KalTrackDictLN_TMatrixTlEdoublegR),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TMatrixTBase<double> *G__Lpbase=(TMatrixTBase<double>*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S4KalTrackDictLN_TVTrackHit),G__get_linked_tagnum(&G__S4KalTrackDictLN_TMatrixTBaselEdoublegR),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S4KalTrackDictLN_TVTrackHit),G__get_linked_tagnum(&G__S4KalTrackDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__S4KalTrackDictLN_TVMeasLayer))) {
     TVMeasLayer *G__Lderived;
     G__Lderived=(TVMeasLayer*)0x1000;
     {
       TAttElement *G__Lpbase=(TAttElement*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__S4KalTrackDictLN_TVMeasLayer),G__get_linked_tagnum(&G__S4KalTrackDictLN_TAttElement),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableS4KalTrackDict() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,256,-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__S4KalTrackDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__S4KalTrackDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__S4KalTrackDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__S4KalTrackDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__S4KalTrackDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__S4KalTrackDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__S4KalTrackDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__S4KalTrackDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__S4KalTrackDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__S4KalTrackDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__S4KalTrackDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__S4KalTrackDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__S4KalTrackDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__S4KalTrackDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__S4KalTrackDictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__S4KalTrackDictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__S4KalTrackDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__S4KalTrackDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Double_t>",117,G__get_linked_tagnum(&G__S4KalTrackDictLN_TMatrixTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Double_t>",117,G__get_linked_tagnum(&G__S4KalTrackDictLN_TMatrixTRow_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Double_t>",117,G__get_linked_tagnum(&G__S4KalTrackDictLN_TMatrixTColumn_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Double_t>",117,G__get_linked_tagnum(&G__S4KalTrackDictLN_TMatrixTDiag_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Double_t>",117,G__get_linked_tagnum(&G__S4KalTrackDictLN_TMatrixTFlat_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Double_t>",117,G__get_linked_tagnum(&G__S4KalTrackDictLN_TMatrixTSub_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Double_t>",117,G__get_linked_tagnum(&G__S4KalTrackDictLN_TMatrixTSparseRow_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Double_t>",117,G__get_linked_tagnum(&G__S4KalTrackDictLN_TMatrixTSparseDiag_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Double_t>",117,G__get_linked_tagnum(&G__S4KalTrackDictLN_TMatrixTRowlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Double_t>",117,G__get_linked_tagnum(&G__S4KalTrackDictLN_TMatrixTColumnlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Double_t>",117,G__get_linked_tagnum(&G__S4KalTrackDictLN_TMatrixTDiaglEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Double_t>",117,G__get_linked_tagnum(&G__S4KalTrackDictLN_TMatrixTFlatlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Double_t>",117,G__get_linked_tagnum(&G__S4KalTrackDictLN_TMatrixTSublEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Double_t>",117,G__get_linked_tagnum(&G__S4KalTrackDictLN_TMatrixTSparseRowlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Double_t>",117,G__get_linked_tagnum(&G__S4KalTrackDictLN_TMatrixTSparseDiaglEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Double_t>",117,G__get_linked_tagnum(&G__S4KalTrackDictLN_TElementActionTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Double_t>",117,G__get_linked_tagnum(&G__S4KalTrackDictLN_TElementPosActionTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__S4KalTrackDictLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__S4KalTrackDictLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__S4KalTrackDictLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__S4KalTrackDictLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__S4KalTrackDictLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__S4KalTrackDictLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__S4KalTrackDictLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__S4KalTrackDictLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__S4KalTrackDictLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__S4KalTrackDictLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__S4KalTrackDictLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__S4KalTrackDictLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__S4KalTrackDictLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__S4KalTrackDictLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__S4KalTrackDictLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__S4KalTrackDictLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__S4KalTrackDictLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* TKalTrackSite */
static void G__setup_memvarTKalTrackSite(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalTrackSite));
   { TKalTrackSite *p; p=(TKalTrackSite*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__S4KalTrackDictLN_TVTrackHit),-1,-1,4,"fHitPtr=",0,"pointer to corresponding hit");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__S4KalTrackDictLN_TVector3),-1,-1,4,"fX0=",0,"pivot");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fIsHitOwner=",0,"true if site owns hit");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalFilterCond),-1,-1,4,"fCondPtr=",0,"pointer to filter condition object");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S4KalTrackDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TVKalDetector */
static void G__setup_memvarTVKalDetector(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__S4KalTrackDictLN_TVKalDetector));
   { TVKalDetector *p; p=(TVKalDetector*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S4KalTrackDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TKalDetCradle */
static void G__setup_memvarTKalDetCradle(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalDetCradle));
   { TKalDetCradle *p; p=(TKalDetCradle*)0x1000; if (p) { }
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fIsMSON=",0,"! switch for multiple scattering");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fIsDEDXON=",0,"! switch for energy loss");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fDone=",0,"! flag to tell if sorting done");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fIsClosed=",0,"! flag to tell if cradle closed");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S4KalTrackDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TKalFilterCond */
static void G__setup_memvarTKalFilterCond(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalFilterCond));
   { TKalFilterCond *p; p=(TKalFilterCond*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S4KalTrackDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TKalTrackState */
static void G__setup_memvarTKalTrackState(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalTrackState));
   { TKalTrackState *p; p=(TKalTrackState*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__S4KalTrackDictLN_TVector3),-1,-1,4,"fX0=",0,"pivot");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S4KalTrackDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TKalTrack */
static void G__setup_memvarTKalTrack(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalTrack));
   { TKalTrack *p; p=(TKalTrack*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMass=",0,"mass [GeV]");
   G__memvar_setup((void*)0,100,0,1,-1,G__defined_typename("Double_t"),-2,4,"kMpi=",0,"! pion mass [GeV]");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S4KalTrackDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TVTrackHit */
static void G__setup_memvarTVTrackHit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__S4KalTrackDictLN_TVTrackHit));
   { TVTrackHit *p; p=(TVTrackHit*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fDim=",0,"dimension of coordinate space");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fBfield=",0,"B field");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S4KalTrackDictLN_TVMeasLayer),-1,-1,4,"fMeasLayerPtr=",0,"pointer to measurement layer");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S4KalTrackDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TVMeasLayer */
static void G__setup_memvarTVMeasLayer(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__S4KalTrackDictLN_TVMeasLayer));
   { TVMeasLayer *p; p=(TVMeasLayer*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S4KalTrackDictLN_TMaterial),-1,-1,4,"fMaterialInPtr=",0,"pointer of inner Material");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S4KalTrackDictLN_TMaterial),-1,-1,4,"fMaterialOutPtr=",0,"pointer of outer Material");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fIndex=",0,"index in TKalDetCradle");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fIsActive=",0,"flag to tell layer is active or not");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__S4KalTrackDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarS4KalTrackDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncTKalTrackSite(void) {
   /* TKalTrackSite */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalTrackSite));
   G__memfunc_setup("TKalTrackSite",1270,G__S4KalTrackDict_240_0_1, 105, G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalTrackSite), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 'kMdim' m i - 'Int_t' 0 'kSdim' p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TKalTrackSite",1270,G__S4KalTrackDict_240_0_2, 105, G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalTrackSite), -1, 0, 2, 1, 1, 0, 
"u 'TVTrackHit' - 11 - ht i - 'Int_t' 0 'kSdim' p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcExpectedMeasVec",1865,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"u 'TVKalState' - 11 - a u 'TKalMatrix' - 1 - h", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CalcMeasVecDerivative",2090,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"u 'TVKalState' - 11 - a u 'TKalMatrix' - 1 - H", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsAccepted",981,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DebugPrint",1012,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetHit",581,G__S4KalTrackDict_240_0_7, 117, G__get_linked_tagnum(&G__S4KalTrackDictLN_TVTrackHit), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPivot",818,G__S4KalTrackDict_240_0_8, 117, G__get_linked_tagnum(&G__S4KalTrackDictLN_TVector3), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBfield",870,G__S4KalTrackDict_240_0_9, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsInB",437,G__S4KalTrackDict_240_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsHitOwner",1004,G__S4KalTrackDict_240_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPivot",830,G__S4KalTrackDict_240_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TVector3' - 11 - x0", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetHitOwner",1116,G__S4KalTrackDict_240_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFilterCond",1302,G__S4KalTrackDict_240_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TKalFilterCond' - 0 - cp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateState",1109,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__S4KalTrackDictLN_TVKalState), -1, 1, 2, 1, 4, 0, 
"u 'TKalMatrix' - 11 - sv i - 'Int_t' 0 '0' type", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CreateState",1109,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__S4KalTrackDictLN_TVKalState), -1, 1, 3, 1, 4, 0, 
"u 'TKalMatrix' - 11 - sv u 'TKalMatrix' - 11 - C "
"i - 'Int_t' 0 '0' type", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CalcXexp",792,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 4, 8, 
"u 'TVKalState' - 11 - a u 'TVector3' - 1 - xx "
"d - 'Double_t' 1 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__S4KalTrackDict_240_0_18, 85, G__get_linked_tagnum(&G__S4KalTrackDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TKalTrackSite::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__S4KalTrackDict_240_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TKalTrackSite::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__S4KalTrackDict_240_0_20, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TKalTrackSite::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__S4KalTrackDict_240_0_21, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TKalTrackSite::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__S4KalTrackDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__S4KalTrackDict_240_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__S4KalTrackDict_240_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TKalTrackSite::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__S4KalTrackDict_240_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TKalTrackSite::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__S4KalTrackDict_240_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TKalTrackSite::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__S4KalTrackDict_240_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TKalTrackSite::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TKalTrackSite", 1396, G__S4KalTrackDict_240_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTVKalDetector(void) {
   /* TVKalDetector */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__S4KalTrackDictLN_TVKalDetector));
   G__memfunc_setup("TVKalDetector",1276,G__S4KalTrackDict_241_0_1, 105, G__get_linked_tagnum(&G__S4KalTrackDictLN_TVKalDetector), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '1' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__S4KalTrackDict_241_0_2, 85, G__get_linked_tagnum(&G__S4KalTrackDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TVKalDetector::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__S4KalTrackDict_241_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TVKalDetector::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__S4KalTrackDict_241_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TVKalDetector::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__S4KalTrackDict_241_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TVKalDetector::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__S4KalTrackDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__S4KalTrackDict_241_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__S4KalTrackDict_241_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TVKalDetector::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__S4KalTrackDict_241_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TVKalDetector::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__S4KalTrackDict_241_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TVKalDetector::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__S4KalTrackDict_241_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TVKalDetector::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TVKalDetector", 1402, G__S4KalTrackDict_241_0_14, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTKalDetCradle(void) {
   /* TKalDetCradle */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalDetCradle));
   G__memfunc_setup("TKalDetCradle",1236,G__S4KalTrackDict_244_0_1, 105, G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalDetCradle), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '1' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Install",727,G__S4KalTrackDict_244_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TVKalDetector' - 1 - det", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SwitchOnMS",975,G__S4KalTrackDict_244_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SwitchOffMS",1069,G__S4KalTrackDict_244_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SwitchOnDEDX",1108,G__S4KalTrackDict_244_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SwitchOffDEDX",1202,G__S4KalTrackDict_244_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Close",502,G__S4KalTrackDict_244_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Reopen",617,G__S4KalTrackDict_244_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsMSOn",537,G__S4KalTrackDict_244_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsDEDXOn",670,G__S4KalTrackDict_244_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsClosed",790,G__S4KalTrackDict_244_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Transport",973,G__S4KalTrackDict_244_0_12, 121, -1, -1, 0, 5, 1, 1, 0, 
"u 'TKalTrackSite' - 11 - from u 'TKalTrackSite' - 1 - to "
"u 'TKalMatrix' - 1 - sv u 'TKalMatrix' - 1 - F "
"u 'TKalMatrix' - 1 - Q", "process noise matrix", (void*) NULL, 0);
   G__memfunc_setup("GetEnergyLoss",1323,G__S4KalTrackDict_244_0_13, 100, -1, G__defined_typename("Double_t"), 0, 4, 1, 1, 8, 
"u 'TMaterial' - 11 - mat u 'TVTrack' - 11 - hel "
"d - 'Double_t' 0 - df d - 'Double_t' 0 - mass", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CalcQms",676,G__S4KalTrackDict_244_0_14, 121, -1, -1, 0, 5, 1, 1, 8, 
"u 'TMaterial' - 11 - mat u 'TVTrack' - 11 - hel "
"d - 'Double_t' 0 - df u 'TKalMatrix' - 1 - Qms "
"d - 'Double_t' 0 - mass", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Update",611,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__S4KalTrackDict_244_0_16, 85, G__get_linked_tagnum(&G__S4KalTrackDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TKalDetCradle::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__S4KalTrackDict_244_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TKalDetCradle::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__S4KalTrackDict_244_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TKalDetCradle::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__S4KalTrackDict_244_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TKalDetCradle::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__S4KalTrackDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__S4KalTrackDict_244_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__S4KalTrackDict_244_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TKalDetCradle::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__S4KalTrackDict_244_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TKalDetCradle::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__S4KalTrackDict_244_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TKalDetCradle::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__S4KalTrackDict_244_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TKalDetCradle::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TKalDetCradle", 1362, G__S4KalTrackDict_244_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTKalFilterCond(void) {
   /* TKalFilterCond */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalFilterCond));
   G__memfunc_setup("IsAccepted",981,G__S4KalTrackDict_245_0_1, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'TKalTrackSite' - 11 - site", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__S4KalTrackDict_245_0_2, 85, G__get_linked_tagnum(&G__S4KalTrackDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TKalFilterCond::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__S4KalTrackDict_245_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TKalFilterCond::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__S4KalTrackDict_245_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TKalFilterCond::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__S4KalTrackDict_245_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TKalFilterCond::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__S4KalTrackDict_245_0_6, 85, G__get_linked_tagnum(&G__S4KalTrackDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__S4KalTrackDict_245_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__S4KalTrackDict_245_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__S4KalTrackDict_245_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__S4KalTrackDict_245_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TKalFilterCond::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__S4KalTrackDict_245_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TKalFilterCond::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__S4KalTrackDict_245_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TKalFilterCond::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__S4KalTrackDict_245_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TKalFilterCond::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("TKalFilterCond", 1366, G__S4KalTrackDict_245_0_14, (int) ('i'), G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalFilterCond), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("TKalFilterCond", 1366, G__S4KalTrackDict_245_0_15, (int) ('i'), G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalFilterCond), -1, 0, 1, 1, 1, 0, "u 'TKalFilterCond' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TKalFilterCond", 1492, G__S4KalTrackDict_245_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__S4KalTrackDict_245_0_17, (int) ('u'), G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalFilterCond), -1, 1, 1, 1, 1, 0, "u 'TKalFilterCond' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTKalTrackState(void) {
   /* TKalTrackState */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalTrackState));
   G__memfunc_setup("TKalTrackState",1378,G__S4KalTrackDict_254_0_1, 105, G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalTrackState), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 'kSdim' p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TKalTrackState",1378,G__S4KalTrackDict_254_0_2, 105, G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalTrackState), -1, 0, 3, 1, 1, 0, 
"u 'TKalMatrix' - 11 - sv i - 'Int_t' 0 '0' type "
"i - 'Int_t' 0 'kSdim' p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TKalTrackState",1378,G__S4KalTrackDict_254_0_3, 105, G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalTrackState), -1, 0, 4, 1, 1, 0, 
"u 'TKalMatrix' - 11 - sv u 'TKalMatrix' - 11 - c "
"i - 'Int_t' 0 '0' type i - 'Int_t' 0 'kSdim' p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TKalTrackState",1378,G__S4KalTrackDict_254_0_4, 105, G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalTrackState), -1, 0, 4, 1, 1, 0, 
"u 'TKalMatrix' - 11 - sv u 'TVKalSite' - 11 - site "
"i - 'Int_t' 0 '0' type i - 'Int_t' 0 'kSdim' p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TKalTrackState",1378,G__S4KalTrackDict_254_0_5, 105, G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalTrackState), -1, 0, 5, 1, 1, 0, 
"u 'TKalMatrix' - 11 - sv u 'TKalMatrix' - 11 - c "
"u 'TVKalSite' - 11 - site i - 'Int_t' 0 '0' type "
"i - 'Int_t' 0 'kSdim' p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MoveTo",602,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalTrackState), -1, 0, 3, 1, 1, 8, 
"u 'TVKalSite' - 1 - to u 'TKalMatrix' - 1 - F "
"U 'TKalMatrix' - 0 '0' QPtr", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MoveTo",602,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalTrackState), -1, 1, 3, 1, 1, 8, 
"u 'TVKalSite' - 1 - to u 'TKalMatrix' - 1 - F "
"u 'TKalMatrix' - 1 - Q", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DebugPrint",1012,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetHelix",794,G__S4KalTrackDict_254_0_9, 117, G__get_linked_tagnum(&G__S4KalTrackDictLN_THelicalTrack), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLine",680,G__S4KalTrackDict_254_0_10, 117, G__get_linked_tagnum(&G__S4KalTrackDictLN_TStraightTrack), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CreateTrack",1097,G__S4KalTrackDict_254_0_11, 117, G__get_linked_tagnum(&G__S4KalTrackDictLN_TVTrack), -1, 1, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__S4KalTrackDict_254_0_12, 85, G__get_linked_tagnum(&G__S4KalTrackDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TKalTrackState::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__S4KalTrackDict_254_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TKalTrackState::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__S4KalTrackDict_254_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TKalTrackState::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__S4KalTrackDict_254_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TKalTrackState::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__S4KalTrackDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__S4KalTrackDict_254_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__S4KalTrackDict_254_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TKalTrackState::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__S4KalTrackDict_254_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TKalTrackState::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__S4KalTrackDict_254_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TKalTrackState::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__S4KalTrackDict_254_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TKalTrackState::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TKalTrackState", 1378, G__S4KalTrackDict_254_0_24, (int) ('i'), G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalTrackState), -1, 0, 1, 1, 1, 0, "u 'TKalTrackState' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TKalTrackState", 1504, G__S4KalTrackDict_254_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__S4KalTrackDict_254_0_26, (int) ('u'), G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalTrackState), -1, 1, 1, 1, 1, 0, "u 'TKalTrackState' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTKalTrack(void) {
   /* TKalTrack */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalTrack));
   G__memfunc_setup("TKalTrack",865,G__S4KalTrackDict_255_0_1, 105, G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalTrack), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '1' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMass",704,G__S4KalTrackDict_255_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - m", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMass",692,G__S4KalTrackDict_255_0_3, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FitToHelix",992,G__S4KalTrackDict_255_0_4, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 0, 
"u 'TKalTrackState' - 1 - a u 'TKalMatrix' - 1 - C "
"i - 'Int_t' 1 - ndf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__S4KalTrackDict_255_0_5, 85, G__get_linked_tagnum(&G__S4KalTrackDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TKalTrack::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__S4KalTrackDict_255_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TKalTrack::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__S4KalTrackDict_255_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TKalTrack::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__S4KalTrackDict_255_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TKalTrack::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__S4KalTrackDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__S4KalTrackDict_255_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__S4KalTrackDict_255_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TKalTrack::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__S4KalTrackDict_255_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TKalTrack::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__S4KalTrackDict_255_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TKalTrack::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__S4KalTrackDict_255_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TKalTrack::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TKalTrack", 991, G__S4KalTrackDict_255_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTVTrackHit(void) {
   /* TVTrackHit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__S4KalTrackDictLN_TVTrackHit));
   G__memfunc_setup("GetX",376,G__S4KalTrackDict_257_0_4, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDX",444,G__S4KalTrackDict_257_0_5, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDimension",1222,G__S4KalTrackDict_257_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetBfield",870,G__S4KalTrackDict_257_0_7, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMeasLayer",1187,G__S4KalTrackDict_257_0_8, 117, G__get_linked_tagnum(&G__S4KalTrackDictLN_TVMeasLayer), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("XvToMv",596,G__S4KalTrackDict_257_0_9, 117, G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalMatrix), -1, 0, 2, 1, 1, 8, 
"u 'TVector3' - 11 - xv d - 'Double_t' 0 - t0", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("DebugPrint",1012,G__S4KalTrackDict_257_0_10, 121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Class",502,G__S4KalTrackDict_257_0_11, 85, G__get_linked_tagnum(&G__S4KalTrackDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TVTrackHit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__S4KalTrackDict_257_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TVTrackHit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__S4KalTrackDict_257_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TVTrackHit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__S4KalTrackDict_257_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TVTrackHit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__S4KalTrackDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__S4KalTrackDict_257_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__S4KalTrackDict_257_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TVTrackHit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__S4KalTrackDict_257_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TVTrackHit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__S4KalTrackDict_257_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TVTrackHit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__S4KalTrackDict_257_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TVTrackHit::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TVTrackHit", 1090, G__S4KalTrackDict_257_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__S4KalTrackDict_257_0_24, (int) ('u'), G__get_linked_tagnum(&G__S4KalTrackDictLN_TVTrackHit), -1, 1, 1, 1, 1, 0, "u 'TVTrackHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTVMeasLayer(void) {
   /* TVMeasLayer */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__S4KalTrackDictLN_TVMeasLayer));
   G__memfunc_setup("XvToMv",596,G__S4KalTrackDict_258_0_2, 117, G__get_linked_tagnum(&G__S4KalTrackDictLN_TKalMatrix), -1, 0, 2, 1, 1, 8, 
"u 'TVTrackHit' - 11 - ht u 'TVector3' - 11 - xv", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("HitToXv",694,G__S4KalTrackDict_258_0_3, 117, G__get_linked_tagnum(&G__S4KalTrackDictLN_TVector3), -1, 0, 1, 1, 1, 8, "u 'TVTrackHit' - 11 - ht", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("CalcDhDa",708,G__S4KalTrackDict_258_0_4, 121, -1, -1, 0, 4, 1, 1, 8, 
"u 'TVTrackHit' - 11 - ht u 'TVector3' - 11 - xv "
"u 'TKalMatrix' - 11 - dxphiada u 'TKalMatrix' - 1 - H", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetMaterial",1103,G__S4KalTrackDict_258_0_5, 117, G__get_linked_tagnum(&G__S4KalTrackDictLN_TMaterial), -1, 1, 1, 1, 1, 8, "g - 'Bool_t' 0 - isoutgoing", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetIndex",792,G__S4KalTrackDict_258_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetIndex",804,G__S4KalTrackDict_258_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsActive",792,G__S4KalTrackDict_258_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__S4KalTrackDict_258_0_9, 85, G__get_linked_tagnum(&G__S4KalTrackDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TVMeasLayer::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__S4KalTrackDict_258_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TVMeasLayer::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__S4KalTrackDict_258_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TVMeasLayer::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__S4KalTrackDict_258_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TVMeasLayer::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__S4KalTrackDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__S4KalTrackDict_258_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__S4KalTrackDict_258_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TVMeasLayer::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__S4KalTrackDict_258_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TVMeasLayer::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__S4KalTrackDict_258_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TVMeasLayer::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__S4KalTrackDict_258_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TVMeasLayer::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~TVMeasLayer", 1195, G__S4KalTrackDict_258_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__S4KalTrackDict_258_0_22, (int) ('u'), G__get_linked_tagnum(&G__S4KalTrackDictLN_TVMeasLayer), -1, 1, 1, 1, 1, 0, "u 'TVMeasLayer' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncS4KalTrackDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalS4KalTrackDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcS4KalTrackDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__S4KalTrackDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TCollection = { "TCollection" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TSeqCollection = { "TSeqCollection" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TAttElement = { "TAttElement" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TElementActionTlEdoublegR = { "TElementActionT<double>" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TElementPosActionTlEdoublegR = { "TElementPosActionT<double>" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TMatrixTlEdoublegR = { "TMatrixT<double>" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TMatrixTRow_constlEdoublegR = { "TMatrixTRow_const<double>" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TMatrixTRowlEdoublegR = { "TMatrixTRow<double>" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TMatrixTDiag_constlEdoublegR = { "TMatrixTDiag_const<double>" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TMatrixTColumn_constlEdoublegR = { "TMatrixTColumn_const<double>" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TMatrixTFlat_constlEdoublegR = { "TMatrixTFlat_const<double>" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TMatrixTSub_constlEdoublegR = { "TMatrixTSub_const<double>" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TMatrixTSparseRow_constlEdoublegR = { "TMatrixTSparseRow_const<double>" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TMatrixTSparseDiag_constlEdoublegR = { "TMatrixTSparseDiag_const<double>" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TMatrixTColumnlEdoublegR = { "TMatrixTColumn<double>" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TMatrixTDiaglEdoublegR = { "TMatrixTDiag<double>" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TMatrixTFlatlEdoublegR = { "TMatrixTFlat<double>" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TMatrixTSublEdoublegR = { "TMatrixTSub<double>" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TMatrixTSparseRowlEdoublegR = { "TMatrixTSparseRow<double>" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TMatrixTSparseDiaglEdoublegR = { "TMatrixTSparseDiag<double>" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TVector3 = { "TVector3" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TKalMatrix = { "TKalMatrix" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TKalTrackSite = { "TKalTrackSite" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TVKalDetector = { "TVKalDetector" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TVTrack = { "TVTrack" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TMaterial = { "TMaterial" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TKalDetCradle = { "TKalDetCradle" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TKalFilterCond = { "TKalFilterCond" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TAttLockable = { "TAttLockable" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TVKalSite = { "TVKalSite" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TVKalState = { "TVKalState" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TVKalSystem = { "TVKalSystem" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_THelicalTrack = { "THelicalTrack" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TStraightTrack = { "TStraightTrack" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TKalTrackState = { "TKalTrackState" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TKalTrack = { "TKalTrack" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TVTrackHit = { "TVTrackHit" , 99 , -1 };
G__linked_taginfo G__S4KalTrackDictLN_TVMeasLayer = { "TVMeasLayer" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableS4KalTrackDict() {
  G__S4KalTrackDictLN_TClass.tagnum = -1 ;
  G__S4KalTrackDictLN_TBuffer.tagnum = -1 ;
  G__S4KalTrackDictLN_TMemberInspector.tagnum = -1 ;
  G__S4KalTrackDictLN_TObject.tagnum = -1 ;
  G__S4KalTrackDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__S4KalTrackDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__S4KalTrackDictLN_TObjArray.tagnum = -1 ;
  G__S4KalTrackDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__S4KalTrackDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__S4KalTrackDictLN_TCollection.tagnum = -1 ;
  G__S4KalTrackDictLN_TSeqCollection.tagnum = -1 ;
  G__S4KalTrackDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__S4KalTrackDictLN_TAttElement.tagnum = -1 ;
  G__S4KalTrackDictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__S4KalTrackDictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__S4KalTrackDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__S4KalTrackDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__S4KalTrackDictLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__S4KalTrackDictLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__S4KalTrackDictLN_TElementActionTlEdoublegR.tagnum = -1 ;
  G__S4KalTrackDictLN_TElementPosActionTlEdoublegR.tagnum = -1 ;
  G__S4KalTrackDictLN_TMatrixTlEdoublegR.tagnum = -1 ;
  G__S4KalTrackDictLN_TMatrixTRow_constlEdoublegR.tagnum = -1 ;
  G__S4KalTrackDictLN_TMatrixTRowlEdoublegR.tagnum = -1 ;
  G__S4KalTrackDictLN_TMatrixTDiag_constlEdoublegR.tagnum = -1 ;
  G__S4KalTrackDictLN_TMatrixTColumn_constlEdoublegR.tagnum = -1 ;
  G__S4KalTrackDictLN_TMatrixTFlat_constlEdoublegR.tagnum = -1 ;
  G__S4KalTrackDictLN_TMatrixTSub_constlEdoublegR.tagnum = -1 ;
  G__S4KalTrackDictLN_TMatrixTSparseRow_constlEdoublegR.tagnum = -1 ;
  G__S4KalTrackDictLN_TMatrixTSparseDiag_constlEdoublegR.tagnum = -1 ;
  G__S4KalTrackDictLN_TMatrixTColumnlEdoublegR.tagnum = -1 ;
  G__S4KalTrackDictLN_TMatrixTDiaglEdoublegR.tagnum = -1 ;
  G__S4KalTrackDictLN_TMatrixTFlatlEdoublegR.tagnum = -1 ;
  G__S4KalTrackDictLN_TMatrixTSublEdoublegR.tagnum = -1 ;
  G__S4KalTrackDictLN_TMatrixTSparseRowlEdoublegR.tagnum = -1 ;
  G__S4KalTrackDictLN_TMatrixTSparseDiaglEdoublegR.tagnum = -1 ;
  G__S4KalTrackDictLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__S4KalTrackDictLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__S4KalTrackDictLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__S4KalTrackDictLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__S4KalTrackDictLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__S4KalTrackDictLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__S4KalTrackDictLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__S4KalTrackDictLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__S4KalTrackDictLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__S4KalTrackDictLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__S4KalTrackDictLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__S4KalTrackDictLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__S4KalTrackDictLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__S4KalTrackDictLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__S4KalTrackDictLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__S4KalTrackDictLN_TVector3.tagnum = -1 ;
  G__S4KalTrackDictLN_TKalMatrix.tagnum = -1 ;
  G__S4KalTrackDictLN_TKalTrackSite.tagnum = -1 ;
  G__S4KalTrackDictLN_TVKalDetector.tagnum = -1 ;
  G__S4KalTrackDictLN_TVTrack.tagnum = -1 ;
  G__S4KalTrackDictLN_TMaterial.tagnum = -1 ;
  G__S4KalTrackDictLN_TKalDetCradle.tagnum = -1 ;
  G__S4KalTrackDictLN_TKalFilterCond.tagnum = -1 ;
  G__S4KalTrackDictLN_TAttLockable.tagnum = -1 ;
  G__S4KalTrackDictLN_TVKalSite.tagnum = -1 ;
  G__S4KalTrackDictLN_TVKalState.tagnum = -1 ;
  G__S4KalTrackDictLN_TVKalSystem.tagnum = -1 ;
  G__S4KalTrackDictLN_THelicalTrack.tagnum = -1 ;
  G__S4KalTrackDictLN_TStraightTrack.tagnum = -1 ;
  G__S4KalTrackDictLN_TKalTrackState.tagnum = -1 ;
  G__S4KalTrackDictLN_TKalTrack.tagnum = -1 ;
  G__S4KalTrackDictLN_TVTrackHit.tagnum = -1 ;
  G__S4KalTrackDictLN_TVMeasLayer.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableS4KalTrackDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TObjArray);
   G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TCollection);
   G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TSeqCollection);
   G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TAttElement);
   G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TElementActionTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TElementPosActionTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TMatrixTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TMatrixTRow_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TMatrixTRowlEdoublegR);
   G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TMatrixTDiag_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TMatrixTColumn_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TMatrixTFlat_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TMatrixTSub_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TMatrixTSparseRow_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TMatrixTSparseDiag_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TMatrixTColumnlEdoublegR);
   G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TMatrixTDiaglEdoublegR);
   G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TMatrixTFlatlEdoublegR);
   G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TMatrixTSublEdoublegR);
   G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TMatrixTSparseRowlEdoublegR);
   G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TMatrixTSparseDiaglEdoublegR);
   G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TVector3);
   G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TKalMatrix);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TKalTrackSite),sizeof(TKalTrackSite),-1,324864,"sample measurement site class",G__setup_memvarTKalTrackSite,G__setup_memfuncTKalTrackSite);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TVKalDetector),sizeof(TVKalDetector),-1,292096,"Base class for detector system",G__setup_memvarTVKalDetector,G__setup_memfuncTVKalDetector);
   G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TVTrack);
   G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TMaterial);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TKalDetCradle),sizeof(TKalDetCradle),-1,292096,"Base class for detector system",G__setup_memvarTKalDetCradle,G__setup_memfuncTKalDetCradle);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TKalFilterCond),sizeof(TKalFilterCond),-1,262144,"Base class for detector system",G__setup_memvarTKalFilterCond,G__setup_memfuncTKalFilterCond);
   G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TAttLockable);
   G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TVKalSite);
   G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TVKalState);
   G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TVKalSystem);
   G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_THelicalTrack);
   G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TStraightTrack);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TKalTrackState),sizeof(TKalTrackState),-1,324864,"sample state vector class",G__setup_memvarTKalTrackState,G__setup_memfuncTKalTrackState);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TKalTrack),sizeof(TKalTrack),-1,292096,"Base class for Kalman Filter",G__setup_memvarTKalTrack,G__setup_memfuncTKalTrack);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TVTrackHit),sizeof(TVTrackHit),-1,325378,"Sample hit class",G__setup_memvarTVTrackHit,G__setup_memfuncTVTrackHit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__S4KalTrackDictLN_TVMeasLayer),sizeof(TVMeasLayer),-1,295939,"Measurement layer interface class",G__setup_memvarTVMeasLayer,G__setup_memfuncTVMeasLayer);
}
extern "C" void G__cpp_setupS4KalTrackDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupS4KalTrackDict()");
  G__set_cpp_environmentS4KalTrackDict();
  G__cpp_setup_tagtableS4KalTrackDict();

  G__cpp_setup_inheritanceS4KalTrackDict();

  G__cpp_setup_typetableS4KalTrackDict();

  G__cpp_setup_memvarS4KalTrackDict();

  G__cpp_setup_memfuncS4KalTrackDict();
  G__cpp_setup_globalS4KalTrackDict();
  G__cpp_setup_funcS4KalTrackDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncS4KalTrackDict();
  return;
}
class G__cpp_setup_initS4KalTrackDict {
  public:
    G__cpp_setup_initS4KalTrackDict() { G__add_setup_func("S4KalTrackDict",(G__incsetup)(&G__cpp_setupS4KalTrackDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initS4KalTrackDict() { G__remove_setup_func("S4KalTrackDict"); }
};
G__cpp_setup_initS4KalTrackDict G__cpp_setup_initializerS4KalTrackDict;

